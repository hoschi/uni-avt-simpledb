/* Generated By:JavaCC: Do not edit this line. SimpleSQLParser.java */
package parser.gene;

import java.io.*;
import parser.syntaxtree.*;
import java.util.Vector;


public class SimpleSQLParser implements SimpleSQLParserConstants {
   private boolean debugALL = false;
   public SimpleSQLParser()
   {
      disable_tracing();
   }
   public String escapeNewline(String str)
   {
      int i,ind;
      i = str.indexOf("\n");
      while ( i != -1 )
      {
         if ( i > 1 && str.charAt(i - 1) == '\r' )
         {
            str = str.substring(0,i - 1) + " "+ str.substring(i + 1);
         }
         else
         {
            str = str.substring(0,i) + " "+ str.substring(i + 1);
         }
         i = str.indexOf("\n",i + 1);
      }
      return str;
   }
   public void setDebugALL(boolean debug)
   {
      debugALL = debug;
      if ( debug )
      {
         enable_tracing();
      }
      else
      {
         disable_tracing();
      }
   }
   public boolean IsDebugAll()
   {
      return debugALL;
   }

  final public CompilationUnit CompilationUnit() throws ParseException {
    trace_call("CompilationUnit");
    try {
   NodeChoice n0;
   Query n1;
   Update n2;
   Delete n3;
   Insert n4;
   CreateTable n5;
   DropTable n6;

   {
   }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        n1 = Query();
        n0 = new NodeChoice(n1, 0);
        break;
      case UPDATE:
        n2 = Update();
        n0 = new NodeChoice(n2, 1);
        break;
      case DELETE:
        n3 = Delete();
        n0 = new NodeChoice(n3, 2);
        break;
      case INSERT:
        n4 = Insert();
        n0 = new NodeChoice(n4, 3);
        break;
      case CREATE:
        n5 = CreateTable();
        n0 = new NodeChoice(n5, 4);
        break;
      case DROP:
        n6 = DropTable();
        n0 = new NodeChoice(n6, 5);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
     {if (true) return new CompilationUnit(n0);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("CompilationUnit");
    }
  }

  final public Query Query() throws ParseException {
    trace_call("Query");
    try {
   NodeToken n0;
   Token n1;
   Items n2;
   NodeToken n3;
   Token n4;
   Tables n5;
   NodeOptional n6 = new NodeOptional();
   Where n7;

   {
   }
      n1 = jj_consume_token(SELECT);
                 n0 = JTBToolkit.makeNodeToken(n1);
      n2 = Items();
      n4 = jj_consume_token(FROM);
               n3 = JTBToolkit.makeNodeToken(n4);
      n5 = Tables();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        n7 = Where();
        n6.addNode(n7);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
     {if (true) return new Query(n0,n2,n3,n5,n6);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Query");
    }
  }

  final public Items Items() throws ParseException {
    trace_call("Items");
    try {
   Item n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Item n5;

   {
   }
      n0 = Item();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
        n2 = new NodeSequence(2);
        n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
        n5 = Item();
        n2.addNode(n5);
        n1.addNode(n2);
      }
     n1.nodes.trimToSize();
     {if (true) return new Items(n0,n1);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Items");
    }
  }

  final public Item Item() throws ParseException {
    trace_call("Item");
    try {
   Name n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Name n5;

   {
   }
      n0 = Name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        n2 = new NodeSequence(2);
        n4 = jj_consume_token(DOT);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
        n5 = Name();
        n2.addNode(n5);
        n1.addNode(n2);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
     {if (true) return new Item(n0,n1);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Item");
    }
  }

  final public Tables Tables() throws ParseException {
    trace_call("Tables");
    try {
   Table n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Table n5;

   {
   }
      n0 = Table();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        n2 = new NodeSequence(2);
        n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
        n5 = Table();
        n2.addNode(n5);
        n1.addNode(n2);
      }
     n1.nodes.trimToSize();
     {if (true) return new Tables(n0,n1);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Tables");
    }
  }

  final public Table Table() throws ParseException {
    trace_call("Table");
    try {
   Name n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Name n5;

   {
   }
      n0 = Name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        n2 = new NodeSequence(2);
        n4 = jj_consume_token(AS);
                n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
        n5 = Name();
        n2.addNode(n5);
        n1.addNode(n2);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
     {if (true) return new Table(n0,n1);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Table");
    }
  }

  final public Where Where() throws ParseException {
    trace_call("Where");
    try {
   NodeToken n0;
   Token n1;
   AndExpression n2;

   {
   }
      n1 = jj_consume_token(WHERE);
                n0 = JTBToolkit.makeNodeToken(n1);
      n2 = AndExpression();
     {if (true) return new Where(n0,n2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Where");
    }
  }

  final public AndExpression AndExpression() throws ParseException {
    trace_call("AndExpression");
    try {
   OrExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   OrExpression n5;

   {
   }
      n0 = OrExpression();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        n2 = new NodeSequence(2);
        n4 = jj_consume_token(AND);
                 n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
        n5 = OrExpression();
        n2.addNode(n5);
        n1.addNode(n2);
      }
     n1.nodes.trimToSize();
     {if (true) return new AndExpression(n0,n1);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("AndExpression");
    }
  }

  final public OrExpression OrExpression() throws ParseException {
    trace_call("OrExpression");
    try {
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   EqualityExpression n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   EqualityExpression n8;
   NodeOptional n9 = new NodeOptional();
   NodeToken n10;
   Token n11;

   {
   }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        n2 = jj_consume_token(LPAREN);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      n3 = EqualityExpression();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
        n5 = new NodeSequence(2);
        n7 = jj_consume_token(OR);
                n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
        n8 = EqualityExpression();
        n5.addNode(n8);
        n4.addNode(n5);
      }
     n4.nodes.trimToSize();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RPAREN:
        n11 = jj_consume_token(RPAREN);
                n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
     {if (true) return new OrExpression(n0,n3,n4,n9);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("OrExpression");
    }
  }

  final public EqualityExpression EqualityExpression() throws ParseException {
    trace_call("EqualityExpression");
    try {
   PrimaryExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   PrimaryExpression n16;

   {
   }
      n0 = PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case LT:
      case GT:
      case LE:
      case GE:
      case NE:
        n2 = new NodeSequence(2);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          n5 = jj_consume_token(EQ);
                     n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
          break;
        case NE:
          n7 = jj_consume_token(NE);
                      n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
          break;
        case LT:
          n9 = jj_consume_token(LT);
                      n8 = JTBToolkit.makeNodeToken(n9);
              n3 = new NodeChoice(n8, 2);
          break;
        case GT:
          n11 = jj_consume_token(GT);
                       n10 = JTBToolkit.makeNodeToken(n11);
              n3 = new NodeChoice(n10, 3);
          break;
        case LE:
          n13 = jj_consume_token(LE);
                       n12 = JTBToolkit.makeNodeToken(n13);
              n3 = new NodeChoice(n12, 4);
          break;
        case GE:
          n15 = jj_consume_token(GE);
                       n14 = JTBToolkit.makeNodeToken(n15);
              n3 = new NodeChoice(n14, 5);
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        n2.addNode(n3);
        n16 = PrimaryExpression();
        n2.addNode(n16);
        n1.addNode(n2);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
     {if (true) return new EqualityExpression(n0,n1);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("EqualityExpression");
    }
  }

  final public PrimaryExpression PrimaryExpression() throws ParseException {
    trace_call("PrimaryExpression");
    try {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   LiteralExpression n10;

   {
   }
      if (jj_2_1(3)) {
        n1 = new NodeSequence(3);
        n3 = jj_consume_token(IDENTIFIER);
                        n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
           n5 = new NodeSequence(2);
          n7 = jj_consume_token(DOT);
                  n6 = JTBToolkit.makeNodeToken(n7);
           n5.addNode(n6);
          n9 = jj_consume_token(IDENTIFIER);
                           n8 = JTBToolkit.makeNodeToken(n9);
           n5.addNode(n8);
           n4.addNode(n5);
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        n1.addNode(n4);
        n0 = new NodeChoice(n1, 0);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
          n10 = LiteralExpression();
        n0 = new NodeChoice(n10, 1);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
     {if (true) return new PrimaryExpression(n0);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PrimaryExpression");
    }
  }

  final public Literals Literals() throws ParseException {
    trace_call("Literals");
    try {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
      n1 = jj_consume_token(STRING_LITERAL);
                         n0 = JTBToolkit.makeNodeToken(n1);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_5;
        }
        n3 = new NodeSequence(2);
        n5 = jj_consume_token(COMMA);
               n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
        n7 = jj_consume_token(STRING_LITERAL);
                            n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
        n2.addNode(n3);
      }
     n2.nodes.trimToSize();
     {if (true) return new Literals(n0,n2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Literals");
    }
  }

  final public Update Update() throws ParseException {
    trace_call("Update");
    try {
   NodeToken n0;
   Token n1;
   Table n2;
   NodeToken n3;
   Token n4;
   AssignExpressions n5;
   NodeOptional n6 = new NodeOptional();
   Where n7;

   {
   }
      n1 = jj_consume_token(UPDATE);
                 n0 = JTBToolkit.makeNodeToken(n1);
      n2 = Table();
      n4 = jj_consume_token(SET);
              n3 = JTBToolkit.makeNodeToken(n4);
      n5 = AssignExpressions();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        n7 = Where();
        n6.addNode(n7);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
     {if (true) return new Update(n0,n2,n3,n5,n6);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Update");
    }
  }

  final public AssignExpressions AssignExpressions() throws ParseException {
    trace_call("AssignExpressions");
    try {
   AssignExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AssignExpression n5;

   {
   }
      n0 = AssignExpression();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_6;
        }
        n2 = new NodeSequence(2);
        n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
        n5 = AssignExpression();
        n2.addNode(n5);
        n1.addNode(n2);
      }
     n1.nodes.trimToSize();
     {if (true) return new AssignExpressions(n0,n1);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("AssignExpressions");
    }
  }

  final public AssignExpression AssignExpression() throws ParseException {
    trace_call("AssignExpression");
    try {
   Name n0;
   NodeToken n1;
   Token n2;
   LiteralExpression n3;

   {
   }
      n0 = Name();
      n2 = jj_consume_token(EQ);
            n1 = JTBToolkit.makeNodeToken(n2);
      n3 = LiteralExpression();
     {if (true) return new AssignExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("AssignExpression");
    }
  }

  final public LiteralExpression LiteralExpression() throws ParseException {
    trace_call("LiteralExpression");
    try {
   NodeToken n0;
   Token n1;

   {
   }
      n1 = jj_consume_token(STRING_LITERAL);
                         n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new LiteralExpression(n0);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("LiteralExpression");
    }
  }

  final public Delete Delete() throws ParseException {
    trace_call("Delete");
    try {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Table n4;
   NodeOptional n5 = new NodeOptional();
   Where n6;

   {
   }
      n1 = jj_consume_token(DELETE);
                 n0 = JTBToolkit.makeNodeToken(n1);
      n3 = jj_consume_token(FROM);
               n2 = JTBToolkit.makeNodeToken(n3);
      n4 = Table();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        n6 = Where();
        n5.addNode(n6);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
     {if (true) return new Delete(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Delete");
    }
  }

  final public Insert Insert() throws ParseException {
    trace_call("Insert");
    try {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Table n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   ColumnNames n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   Literals n16;
   NodeToken n17;
   Token n18;

   {
   }
      n1 = jj_consume_token(INSERT);
                 n0 = JTBToolkit.makeNodeToken(n1);
      n3 = jj_consume_token(INTO);
               n2 = JTBToolkit.makeNodeToken(n3);
      n4 = Table();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        n6 = new NodeSequence(3);
        n8 = jj_consume_token(LPAREN);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
        n9 = ColumnNames();
        n6.addNode(n9);
        n11 = jj_consume_token(RPAREN);
                n10 = JTBToolkit.makeNodeToken(n11);
        n6.addNode(n10);
        n5.addNode(n6);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      n13 = jj_consume_token(VALUES);
                  n12 = JTBToolkit.makeNodeToken(n13);
      n15 = jj_consume_token(LPAREN);
             n14 = JTBToolkit.makeNodeToken(n15);
      n16 = Literals();
      n18 = jj_consume_token(RPAREN);
             n17 = JTBToolkit.makeNodeToken(n18);
     {if (true) return new Insert(n0,n2,n4,n5,n12,n14,n16,n17);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Insert");
    }
  }

  final public ColumnNames ColumnNames() throws ParseException {
    trace_call("ColumnNames");
    try {
   Name n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Name n5;

   {
   }
      n0 = Name();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_7;
        }
        n2 = new NodeSequence(2);
        n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
        n5 = Name();
        n2.addNode(n5);
        n1.addNode(n2);
      }
     n1.nodes.trimToSize();
     {if (true) return new ColumnNames(n0,n1);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ColumnNames");
    }
  }

  final public CreateTable CreateTable() throws ParseException {
    trace_call("CreateTable");
    try {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Name n4;
   NodeToken n5;
   Token n6;
   ColumnDefinition n7;
   NodeListOptional n8 = new NodeListOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   ColumnDefinition n12;
   NodeToken n13;
   Token n14;

   {
   }
      n1 = jj_consume_token(CREATE);
                 n0 = JTBToolkit.makeNodeToken(n1);
      n3 = jj_consume_token(TABLE);
                n2 = JTBToolkit.makeNodeToken(n3);
      n4 = Name();
      n6 = jj_consume_token(LPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
      n7 = ColumnDefinition();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_8;
        }
        n9 = new NodeSequence(2);
        n11 = jj_consume_token(COMMA);
                n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
        n12 = ColumnDefinition();
        n9.addNode(n12);
        n8.addNode(n9);
      }
     n8.nodes.trimToSize();
      n14 = jj_consume_token(RPAREN);
             n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new CreateTable(n0,n2,n4,n5,n7,n8,n13);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("CreateTable");
    }
  }

  final public DropTable DropTable() throws ParseException {
    trace_call("DropTable");
    try {
   NodeToken n0;
   Token n1;
   Name n2;

   {
   }
      n1 = jj_consume_token(DROP);
               n0 = JTBToolkit.makeNodeToken(n1);
      n2 = Name();
     {if (true) return new DropTable(n0,n2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("DropTable");
    }
  }

  final public Name Name() throws ParseException {
    trace_call("Name");
    try {
   NodeToken n0;
   Token n1;

   {
   }
      n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Name(n0);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Name");
    }
  }

  final public ColumnDefinition ColumnDefinition() throws ParseException {
    trace_call("ColumnDefinition");
    try {
   Name n0;
   DataType n1;

   {
   }
      n0 = Name();
      n1 = DataType();
     {if (true) return new ColumnDefinition(n0,n1);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ColumnDefinition");
    }
  }

  final public DataType DataType() throws ParseException {
    trace_call("DataType");
    try {
   NodeToken n0;
   Token n1;

   {
   }
      n1 = jj_consume_token(VARCHAR);
                  n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new DataType(n0);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("DataType");
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_3R_9() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) jj_scanpos = xsp;
    return false;
  }

  public SimpleSQLParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xd602000,0x8000,0x0,0x0,0x0,0x100000,0x10000,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x8000,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x4000,0x8000,0x4000,0x0,0x0,0x1000,0x0,0x2000,0x3f0000,0x3f0000,0x8000,0x100,0x4000,0x0,0x4000,0x0,0x1000,0x4000,0x4000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public SimpleSQLParser(java.io.InputStream stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new SimpleSQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public SimpleSQLParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new SimpleSQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public SimpleSQLParser(SimpleSQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(SimpleSQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[54];
    for (int i = 0; i < 54; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

  final public void enable_tracing() {
    trace_enabled = true;
  }

  final public void disable_tracing() {
    trace_enabled = false;
  }

  final private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  final private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  final private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(">" + where);
    }
  }

  final private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      NodeToken node = new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);

      if ( t.specialToken == null )
         return node;

      Vector temp = new Vector();
      Token orig = t;

      while ( t.specialToken != null ) {
         t = t.specialToken;
         temp.addElement(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
      }

      // Reverse the special token list
      for ( int i = temp.size() - 1; i >= 0; --i )
         node.addSpecial((NodeToken)temp.elementAt(i));

      node.trimSpecials();
      return node;
   }
}
