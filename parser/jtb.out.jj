//
// Generated by JTB 1.2.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
   OUTPUT_DIRECTORY = "gene";
   STATIC = false;
   DEBUG_PARSER = true;
}

PARSER_BEGIN(SimpleSQLParser)
package parser.gene;

import java.io.*;
import parser.syntaxtree.*;
import java.util.Vector;


public class SimpleSQLParser 
{
   private boolean debugALL = false;
   public SimpleSQLParser()
   {
      disable_tracing();
   }
   public String escapeNewline(String str)
   {
      int i,ind;
      i = str.indexOf("\n");
      while ( i != -1 )
      {
         if ( i > 1 && str.charAt(i - 1) == '\r' )
         {
            str = str.substring(0,i - 1) + " "+ str.substring(i + 1);
         }
         else
         {
            str = str.substring(0,i) + " "+ str.substring(i + 1);
         }
         i = str.indexOf("\n",i + 1);
      }
      return str;
   }
   public void setDebugALL(boolean debug)
   {
      debugALL = debug;
      if ( debug )
      {
         enable_tracing();
      }
      else
      {
         disable_tracing();
      }
   }
   public boolean IsDebugAll()
   {
      return debugALL;
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      NodeToken node = new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);

      if ( t.specialToken == null )
         return node;

      Vector temp = new Vector();
      Token orig = t;

      while ( t.specialToken != null ) {
         t = t.specialToken;
         temp.addElement(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
      }

      // Reverse the special token list
      for ( int i = temp.size() - 1; i >= 0; --i )
         node.addSpecial((NodeToken)temp.elementAt(i));

      node.trimSpecials();
      return node;
   }
}


PARSER_END(SimpleSQLParser)

SPECIAL_TOKEN :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

MORE :
{
   "//" : IN_SINGLE_LINE_COMMENT
   | <"/**" ~["/"]>
      {
         input_stream.backup(1);
      } : IN_FORMAL_COMMENT
   | "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT> SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n"> : DEFAULT
}

<IN_FORMAL_COMMENT> SPECIAL_TOKEN :
{
   <FORMAL_COMMENT: "*/"> : DEFAULT
}

<IN_MULTI_LINE_COMMENT> SPECIAL_TOKEN :
{
   <MULTI_LINE_COMMENT: "*/"> : DEFAULT
}

<IN_SINGLE_LINE_COMMENT, IN_FORMAL_COMMENT, IN_MULTI_LINE_COMMENT> MORE :
{
   <~[]>
}

TOKEN :
{
   <SELECT: "select">
   | <FROM: "from">
   | <WHERE: "where">
   | <AND: "and">
   | <OR: "or">
   | <IN: "in">
   | <NOT: "not">
   | <AS: "as">
   | <CREATE: "create">
   | <DROP: "drop">
   | <TABLE: "table">
   | <UPDATE: "update">
   | <SET: "set">
   | <DELETE: "delete">
   | <INSERT: "insert">
   | <VALUES: "values">
   | <INTO: "into">
   | <VARCHAR: "varchar">
   | <INTEGER: "integer">
   | <FLOAT: "float">
}

TOKEN :
{
   <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l", "L"])? | <HEX_LITERAL> (["l", "L"])? | <OCTAL_LITERAL> (["l", "L"])?>
   | <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
   | <#HEX_LITERAL: "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+>
   | <#OCTAL_LITERAL: "0" (["0"-"7"])*>
   | <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f", "F", "d", "D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f", "F", "d", "D"])? | (["0"-"9"])+ <EXPONENT> (["f", "F", "d", "D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f", "F", "d", "D"]>
   | <#EXPONENT: ["e", "E"] (["+", "-"])? (["0"-"9"])+>
   | <CHARACTER_LITERAL: "'" ((~["'", "\\", "\n", "\r"]) | ("\\" (["n", "t", "b", "r", "f", "\\", "'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))) "'">
   | <STRING_LITERAL: "\"" ((~["\"", "\\", "\n", "\r"]) | ("\\" (["n", "t", "b", "r", "f", "\\", "'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])))* "\"">
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

TOKEN :
{
   <LPAREN: "(">
   | <RPAREN: ")">
   | <COMMA: ",">
   | <DOT: ".">
}

TOKEN :
{
   <EQ: "=">
   | <LT: "<">
   | <GT: ">">
   | <LE: "<=">
   | <GE: ">=">
   | <NE: "!=">
}

CompilationUnit CompilationUnit() :
{
   NodeChoice n0;
   Query n1;
   Update n2;
   Delete n3;
   Insert n4;
   CreateTable n5;
   DropTable n6;

   {
   }
}
{
   (
      n1=Query()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Update()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=Delete()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=Insert()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=CreateTable()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=DropTable()
      { n0 = new NodeChoice(n6, 5); }
   )
   
   { return new CompilationUnit(n0); }
}

Query Query() :
{
   NodeToken n0;
   Token n1;
   Items n2;
   NodeToken n3;
   Token n4;
   Tables n5;
   NodeOptional n6 = new NodeOptional();
   Where n7;

   {
   }
}
{
   n1=<SELECT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Items()
   n4=<FROM> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=Tables()
   (
      n7=Where()
      { n6.addNode(n7); }
   )?
   
   { return new Query(n0,n2,n3,n5,n6); }
}

Items Items() :
{
   Item n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Item n5;

   {
   }
}
{
   n0=Item()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Item()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new Items(n0,n1); }
}

Item Item() :
{
   Name n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Name n5;

   {
   }
}
{
   n0=Name()
   (
      { n2 = new NodeSequence(2); }
      n4="." { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Name()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new Item(n0,n1); }
}

Tables Tables() :
{
   Table n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Table n5;

   {
   }
}
{
   n0=Table()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Table()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new Tables(n0,n1); }
}

Table Table() :
{
   Name n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Name n5;

   {
   }
}
{
   n0=Name()
   (
      { n2 = new NodeSequence(2); }
      n4=<AS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Name()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new Table(n0,n1); }
}

Where Where() :
{
   NodeToken n0;
   Token n1;
   AndExpression n2;

   {
   }
}
{
   n1=<WHERE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=AndExpression()
   
   { return new Where(n0,n2); }
}

AndExpression AndExpression() :
{
   OrExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   OrExpression n5;

   {
   }
}
{
   n0=OrExpression()
   (
      { n2 = new NodeSequence(2); }
      n4=<AND> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=OrExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new AndExpression(n0,n1); }
}

OrExpression OrExpression() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   EqualityExpression n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   EqualityExpression n8;
   NodeOptional n9 = new NodeOptional();
   NodeToken n10;
   Token n11;

   {
   }
}
{
   (
      n2="(" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n3=EqualityExpression()
   (
      { n5 = new NodeSequence(2); }
      n7=<OR> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n8=EqualityExpression()
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   (
      n11=")" { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
   )?
   
   { return new OrExpression(n0,n3,n4,n9); }
}

EqualityExpression EqualityExpression() :
{
   PrimaryExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   PrimaryExpression n16;

   {
   }
}
{
   n0=PrimaryExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5="=" { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7="!=" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         |
            n9=<LT> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n3 = new NodeChoice(n8, 2); }
         |
            n11=<GT> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n3 = new NodeChoice(n10, 3); }
         |
            n13=<LE> { n12 = JTBToolkit.makeNodeToken(n13); }
            { n3 = new NodeChoice(n12, 4); }
         |
            n15=<GE> { n14 = JTBToolkit.makeNodeToken(n15); }
            { n3 = new NodeChoice(n14, 5); }
         )
         
      )
      { n2.addNode(n3); }
      n16=PrimaryExpression()
      { n2.addNode(n16); }
      { n1.addNode(n2); }
   )?
   
   { return new EqualityExpression(n0,n1); }
}

PrimaryExpression PrimaryExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   LiteralExpression n10;

   {
   }
}
{
   (
      LOOKAHEAD(3)
      { n1 = new NodeSequence(3); }
      n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         { n5 = new NodeSequence(2); }
         n7="." { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
         n9=<IDENTIFIER> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n5.addNode(n8); }
         { n4.addNode(n5); }
      )?
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n10=LiteralExpression()
      { n0 = new NodeChoice(n10, 1); }
   )
   
   { return new PrimaryExpression(n0); }
}

Literals Literals() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   n1=<STRING_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<STRING_LITERAL> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new Literals(n0,n2); }
}

Update Update() :
{
   NodeToken n0;
   Token n1;
   Table n2;
   NodeToken n3;
   Token n4;
   AssignExpressions n5;
   NodeOptional n6 = new NodeOptional();
   Where n7;

   {
   }
}
{
   n1=<UPDATE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Table()
   n4=<SET> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=AssignExpressions()
   (
      n7=Where()
      { n6.addNode(n7); }
   )?
   
   { return new Update(n0,n2,n3,n5,n6); }
}

AssignExpressions AssignExpressions() :
{
   AssignExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AssignExpression n5;

   {
   }
}
{
   n0=AssignExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=AssignExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new AssignExpressions(n0,n1); }
}

AssignExpression AssignExpression() :
{
   Name n0;
   NodeToken n1;
   Token n2;
   LiteralExpression n3;

   {
   }
}
{
   n0=Name()
   n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=LiteralExpression()
   
   { return new AssignExpression(n0,n1,n3); }
}

LiteralExpression LiteralExpression() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<STRING_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new LiteralExpression(n0); }
}

Delete Delete() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Table n4;
   NodeOptional n5 = new NodeOptional();
   Where n6;

   {
   }
}
{
   n1=<DELETE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<FROM> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Table()
   (
      n6=Where()
      { n5.addNode(n6); }
   )?
   
   { return new Delete(n0,n2,n4,n5); }
}

Insert Insert() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Table n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   ColumnNames n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   Literals n16;
   NodeToken n17;
   Token n18;

   {
   }
}
{
   n1=<INSERT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<INTO> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Table()
   (
      { n6 = new NodeSequence(3); }
      n8="(" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=ColumnNames()
      { n6.addNode(n9); }
      n11=")" { n10 = JTBToolkit.makeNodeToken(n11); }
      { n6.addNode(n10); }
      { n5.addNode(n6); }
   )?
   n13=<VALUES> { n12 = JTBToolkit.makeNodeToken(n13); }
   n15="(" { n14 = JTBToolkit.makeNodeToken(n15); }
   n16=Literals()
   n18=")" { n17 = JTBToolkit.makeNodeToken(n18); }
   
   { return new Insert(n0,n2,n4,n5,n12,n14,n16,n17); }
}

ColumnNames ColumnNames() :
{
   Name n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Name n5;

   {
   }
}
{
   n0=Name()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Name()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ColumnNames(n0,n1); }
}

CreateTable CreateTable() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Name n4;
   NodeToken n5;
   Token n6;
   ColumnDefinition n7;
   NodeListOptional n8 = new NodeListOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   ColumnDefinition n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   n1=<CREATE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<TABLE> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Name()
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=ColumnDefinition()
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=ColumnDefinition()
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )*
   { n8.nodes.trimToSize(); }
   n14=")" { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new CreateTable(n0,n2,n4,n5,n7,n8,n13); }
}

DropTable DropTable() :
{
   NodeToken n0;
   Token n1;
   Name n2;

   {
   }
}
{
   n1=<DROP> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Name()
   
   { return new DropTable(n0,n2); }
}

Name Name() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Name(n0); }
}

ColumnDefinition ColumnDefinition() :
{
   Name n0;
   DataType n1;

   {
   }
}
{
   n0=Name()
   n1=DataType()
   
   { return new ColumnDefinition(n0,n1); }
}

DataType DataType() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<VARCHAR> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new DataType(n0); }
}
