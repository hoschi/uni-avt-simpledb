//
// Generated by JTB 1.2.2
//

package parser.visitor;
import parser.syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class ObjectDepthFirst implements ObjectVisitor {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public Object visit(NodeList n, Object argu) {
      Object _ret=null;
      int _count=0;
      for ( Enumeration e = n.elements(); e.hasMoreElements(); ) {
         ((Node)e.nextElement()).accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public Object visit(NodeListOptional n, Object argu) {
      if ( n.present() ) {
         Object _ret=null;
         int _count=0;
         for ( Enumeration e = n.elements(); e.hasMoreElements(); ) {
            ((Node)e.nextElement()).accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public Object visit(NodeOptional n, Object argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public Object visit(NodeSequence n, Object argu) {
      Object _ret=null;
      int _count=0;
      for ( Enumeration e = n.elements(); e.hasMoreElements(); ) {
         ((Node)e.nextElement()).accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public Object visit(NodeToken n, Object argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> Query()
    *       | Update()
    *       | Delete()
    *       | Insert()
    *       | CreateTable()
    *       | DropTable()
    */
   public Object visit(CompilationUnit n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SELECT>
    * f1 -> Items()
    * f2 -> <FROM>
    * f3 -> Tables()
    * f4 -> [ Where() ]
    */
   public Object visit(Query n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Item()
    * f1 -> ( "," Item() )*
    */
   public Object visit(Items n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Name()
    * f1 -> [ "." Name() ]
    */
   public Object visit(Item n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Table()
    * f1 -> ( "," Table() )*
    */
   public Object visit(Tables n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Name()
    * f1 -> [ <AS> Name() ]
    */
   public Object visit(Table n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <WHERE>
    * f1 -> AndExpression()
    */
   public Object visit(Where n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    * f1 -> ( <AND> OrExpression() )*
    */
   public Object visit(AndExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> [ "(" ]
    * f1 -> EqualityExpression()
    * f2 -> ( <OR> EqualityExpression() )*
    * f3 -> [ ")" ]
    */
   public Object visit(OrExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> [ ( "=" | "!=" | <LT> | <GT> | <LE> | <GE> ) PrimaryExpression() ]
    */
   public Object visit(EqualityExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER> [ "." <IDENTIFIER> ]
    *       | LiteralExpression()
    */
   public Object visit(PrimaryExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <STRING_LITERAL>
    * f1 -> ( "," <STRING_LITERAL> )*
    */
   public Object visit(Literals n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <UPDATE>
    * f1 -> Table()
    * f2 -> <SET>
    * f3 -> AssignExpressions()
    * f4 -> [ Where() ]
    */
   public Object visit(Update n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> AssignExpression()
    * f1 -> ( "," AssignExpression() )*
    */
   public Object visit(AssignExpressions n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Name()
    * f1 -> "="
    * f2 -> LiteralExpression()
    */
   public Object visit(AssignExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <STRING_LITERAL>
    */
   public Object visit(LiteralExpression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <DELETE>
    * f1 -> <FROM>
    * f2 -> Table()
    * f3 -> [ Where() ]
    */
   public Object visit(Delete n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INSERT>
    * f1 -> <INTO>
    * f2 -> Table()
    * f3 -> [ "(" ColumnNames() ")" ]
    * f4 -> <VALUES>
    * f5 -> "("
    * f6 -> Literals()
    * f7 -> ")"
    */
   public Object visit(Insert n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Name()
    * f1 -> ( "," Name() )*
    */
   public Object visit(ColumnNames n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <CREATE>
    * f1 -> <TABLE>
    * f2 -> Name()
    * f3 -> "("
    * f4 -> ColumnDefinition()
    * f5 -> ( "," ColumnDefinition() )*
    * f6 -> ")"
    */
   public Object visit(CreateTable n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <DROP>
    * f1 -> Name()
    */
   public Object visit(DropTable n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public Object visit(Name n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Name()
    * f1 -> DataType()
    */
   public Object visit(ColumnDefinition n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <VARCHAR>
    */
   public Object visit(DataType n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
