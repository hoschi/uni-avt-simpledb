//
// Generated by JTB 1.2.2
//

package parser.visitor;
import parser.syntaxtree.*;
import java.util.*;

/**
 * All Object visitors must implement this interface.
 */
public interface ObjectVisitor {
   //
   // Object Auto class visitors
   //
   public Object visit(NodeList n, Object argu);
   public Object visit(NodeListOptional n, Object argu);
   public Object visit(NodeOptional n, Object argu);
   public Object visit(NodeSequence n, Object argu);
   public Object visit(NodeToken n, Object argu);

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> Query()
    *       | Update()
    *       | Delete()
    *       | Insert()
    *       | CreateTable()
    *       | DropTable()
    */
   public Object visit(CompilationUnit n, Object argu);

   /**
    * f0 -> <SELECT>
    * f1 -> Items()
    * f2 -> <FROM>
    * f3 -> Tables()
    * f4 -> [ Where() ]
    */
   public Object visit(Query n, Object argu);

   /**
    * f0 -> Item()
    * f1 -> ( "," Item() )*
    */
   public Object visit(Items n, Object argu);

   /**
    * f0 -> Name()
    * f1 -> [ "." Name() ]
    */
   public Object visit(Item n, Object argu);

   /**
    * f0 -> Table()
    * f1 -> ( "," Table() )*
    */
   public Object visit(Tables n, Object argu);

   /**
    * f0 -> Name()
    * f1 -> [ <AS> Name() ]
    */
   public Object visit(Table n, Object argu);

   /**
    * f0 -> <WHERE>
    * f1 -> AndExpression()
    */
   public Object visit(Where n, Object argu);

   /**
    * f0 -> OrExpression()
    * f1 -> ( <AND> OrExpression() )*
    */
   public Object visit(AndExpression n, Object argu);

   /**
    * f0 -> [ "(" ]
    * f1 -> EqualityExpression()
    * f2 -> ( <OR> EqualityExpression() )*
    * f3 -> [ ")" ]
    */
   public Object visit(OrExpression n, Object argu);

   /**
    * f0 -> PrimaryExpression()
    * f1 -> [ ( "=" | "!=" | <LT> | <GT> | <LE> | <GE> ) PrimaryExpression() ]
    */
   public Object visit(EqualityExpression n, Object argu);

   /**
    * f0 -> <IDENTIFIER> [ "." <IDENTIFIER> ]
    *       | LiteralExpression()
    */
   public Object visit(PrimaryExpression n, Object argu);

   /**
    * f0 -> <STRING_LITERAL>
    * f1 -> ( "," <STRING_LITERAL> )*
    */
   public Object visit(Literals n, Object argu);

   /**
    * f0 -> <UPDATE>
    * f1 -> Table()
    * f2 -> <SET>
    * f3 -> AssignExpressions()
    * f4 -> [ Where() ]
    */
   public Object visit(Update n, Object argu);

   /**
    * f0 -> AssignExpression()
    * f1 -> ( "," AssignExpression() )*
    */
   public Object visit(AssignExpressions n, Object argu);

   /**
    * f0 -> Name()
    * f1 -> "="
    * f2 -> LiteralExpression()
    */
   public Object visit(AssignExpression n, Object argu);

   /**
    * f0 -> <STRING_LITERAL>
    */
   public Object visit(LiteralExpression n, Object argu);

   /**
    * f0 -> <DELETE>
    * f1 -> <FROM>
    * f2 -> Table()
    * f3 -> [ Where() ]
    */
   public Object visit(Delete n, Object argu);

   /**
    * f0 -> <INSERT>
    * f1 -> <INTO>
    * f2 -> Table()
    * f3 -> [ "(" ColumnNames() ")" ]
    * f4 -> <VALUES>
    * f5 -> "("
    * f6 -> Literals()
    * f7 -> ")"
    */
   public Object visit(Insert n, Object argu);

   /**
    * f0 -> Name()
    * f1 -> ( "," Name() )*
    */
   public Object visit(ColumnNames n, Object argu);

   /**
    * f0 -> <CREATE>
    * f1 -> <TABLE>
    * f2 -> Name()
    * f3 -> "("
    * f4 -> ColumnDefinition()
    * f5 -> ( "," ColumnDefinition() )*
    * f6 -> ")"
    */
   public Object visit(CreateTable n, Object argu);

   /**
    * f0 -> <DROP>
    * f1 -> Name()
    */
   public Object visit(DropTable n, Object argu);

   /**
    * f0 -> <IDENTIFIER>
    */
   public Object visit(Name n, Object argu);

   /**
    * f0 -> Name()
    * f1 -> DataType()
    */
   public Object visit(ColumnDefinition n, Object argu);

   /**
    * f0 -> <VARCHAR>
    */
   public Object visit(DataType n, Object argu);

}
