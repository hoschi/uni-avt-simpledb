//
// Generated by JTB 1.2.2
//

package parser.visitor;
import parser.syntaxtree.*;
import java.util.*;

/**
 * All void visitors must implement this interface.
 */
public interface Visitor {
   //
   // void Auto class visitors
   //
   public void visit(NodeList n);
   public void visit(NodeListOptional n);
   public void visit(NodeOptional n);
   public void visit(NodeSequence n);
   public void visit(NodeToken n);

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> Query()
    *       | Update()
    *       | Delete()
    *       | Insert()
    *       | CreateTable()
    *       | DropTable()
    */
   public void visit(CompilationUnit n);

   /**
    * f0 -> <SELECT>
    * f1 -> Items()
    * f2 -> <FROM>
    * f3 -> Tables()
    * f4 -> [ Where() ]
    */
   public void visit(Query n);

   /**
    * f0 -> Item()
    * f1 -> ( "," Item() )*
    */
   public void visit(Items n);

   /**
    * f0 -> Name()
    * f1 -> [ "." Name() ]
    */
   public void visit(Item n);

   /**
    * f0 -> Table()
    * f1 -> ( "," Table() )*
    */
   public void visit(Tables n);

   /**
    * f0 -> Name()
    * f1 -> [ <AS> Name() ]
    */
   public void visit(Table n);

   /**
    * f0 -> <WHERE>
    * f1 -> AndExpression()
    */
   public void visit(Where n);

   /**
    * f0 -> OrExpression()
    * f1 -> ( <AND> OrExpression() )*
    */
   public void visit(AndExpression n);

   /**
    * f0 -> [ "(" ]
    * f1 -> EqualityExpression()
    * f2 -> ( <OR> EqualityExpression() )*
    * f3 -> [ ")" ]
    */
   public void visit(OrExpression n);

   /**
    * f0 -> PrimaryExpression()
    * f1 -> [ ( "=" | "!=" | <LT> | <GT> | <LE> | <GE> ) PrimaryExpression() ]
    */
   public void visit(EqualityExpression n);

   /**
    * f0 -> <IDENTIFIER> [ "." <IDENTIFIER> ]
    *       | LiteralExpression()
    */
   public void visit(PrimaryExpression n);

   /**
    * f0 -> <STRING_LITERAL>
    * f1 -> ( "," <STRING_LITERAL> )*
    */
   public void visit(Literals n);

   /**
    * f0 -> <UPDATE>
    * f1 -> Table()
    * f2 -> <SET>
    * f3 -> AssignExpressions()
    * f4 -> [ Where() ]
    */
   public void visit(Update n);

   /**
    * f0 -> AssignExpression()
    * f1 -> ( "," AssignExpression() )*
    */
   public void visit(AssignExpressions n);

   /**
    * f0 -> Name()
    * f1 -> "="
    * f2 -> LiteralExpression()
    */
   public void visit(AssignExpression n);

   /**
    * f0 -> <STRING_LITERAL>
    */
   public void visit(LiteralExpression n);

   /**
    * f0 -> <DELETE>
    * f1 -> <FROM>
    * f2 -> Table()
    * f3 -> [ Where() ]
    */
   public void visit(Delete n);

   /**
    * f0 -> <INSERT>
    * f1 -> <INTO>
    * f2 -> Table()
    * f3 -> [ "(" ColumnNames() ")" ]
    * f4 -> <VALUES>
    * f5 -> "("
    * f6 -> Literals()
    * f7 -> ")"
    */
   public void visit(Insert n);

   /**
    * f0 -> Name()
    * f1 -> ( "," Name() )*
    */
   public void visit(ColumnNames n);

   /**
    * f0 -> <CREATE>
    * f1 -> <TABLE>
    * f2 -> Name()
    * f3 -> "("
    * f4 -> ColumnDefinition()
    * f5 -> ( "," ColumnDefinition() )*
    * f6 -> ")"
    */
   public void visit(CreateTable n);

   /**
    * f0 -> <DROP>
    * f1 -> Name()
    */
   public void visit(DropTable n);

   /**
    * f0 -> <IDENTIFIER>
    */
   public void visit(Name n);

   /**
    * f0 -> Name()
    * f1 -> DataType()
    */
   public void visit(ColumnDefinition n);

   /**
    * f0 -> <VARCHAR>
    */
   public void visit(DataType n);

}

